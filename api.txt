O Open WebUI geralmente suporta uma série de métodos para interagir com o modelo de linguagem, incluindo, mas não se limitando a:

    Enviar mensagens para o modelo de linguagem: Permite enviar prompts e receber respostas.
    Obter informações sobre o modelo: Fornece detalhes como nome do modelo, versão, etc.
    Gerenciamento de sessões: Permite criar, listar e excluir sessões.
    Histórico de conversas: Permite acessar o histórico de mensagens em uma sessão.

Vou fornecer um exemplo geral de como esses métodos podem ser estruturados e exemplos de consumo em Python. Note que a implementação específica pode variar, então ajustar os endpoints de acordo com a documentação específica do Open WebUI que você estiver usando é recomendado.
Exemplos de Endpoints

    Enviar mensagens para o modelo de linguagem:
        Endpoint: POST /api/v1/chat
        Payload: {"prompt": "Sua mensagem aqui"}

    Obter informações sobre o modelo:
        Endpoint: GET /api/v1/model
        Payload: None

    Gerenciamento de sessões:
        Criar uma nova sessão: POST /api/v1/sessions
        Listar todas as sessões: GET /api/v1/sessions
        Excluir uma sessão: DELETE /api/v1/sessions/{session_id}

    Histórico de conversas:
        Endpoint: GET /api/v1/sessions/{session_id}/history
        Payload: None

Exemplo de Consumo em Python
Enviar mensagens para o modelo

python

import requests

API_URL = "http://localhost:9090/api/v1/chat"

def send_message(prompt):
    response = requests.post(API_URL, json={"prompt": prompt})
    if response.status_code == 200:
        return response.json()
    else:
        return {"error": response.text}

if __name__ == "__main__":
    prompt = "Qual é a capital da França?"
    response = send_message(prompt)
    print("Resposta do modelo:", response)

Obter informações sobre o modelo

python

API_URL = "http://localhost:9090/api/v1/model"

def get_model_info():
    response = requests.get(API_URL)
    if response.status_code == 200:
        return response.json()
    else:
        return {"error": response.text}

if __name__ == "__main__":
    info = get_model_info()
    print("Informações do modelo:", info)

Gerenciamento de sessões
Criar uma nova sessão

python

API_URL = "http://localhost:9090/api/v1/sessions"

def create_session():
    response = requests.post(API_URL)
    if response.status_code == 200:
        return response.json()
    else:
        return {"error": response.text}

if __name__ == "__main__":
    session = create_session()
    print("Nova sessão criada:", session)

Listar todas as sessões

python

API_URL = "http://localhost:9090/api/v1/sessions"

def list_sessions():
    response = requests.get(API_URL)
    if response.status_code == 200:
        return response.json()
    else:
        return {"error": response.text}

if __name__ == "__main__":
    sessions = list_sessions()
    print("Sessões disponíveis:", sessions)

Excluir uma sessão

python

API_URL = "http://localhost:9090/api/v1/sessions/{session_id}"

def delete_session(session_id):
    response = requests.delete(API_URL.format(session_id=session_id))
    if response.status_code == 200:
        return {"status": "success"}
    else:
        return {"error": response.text}

if __name__ == "__main__":
    session_id = "id_da_sessao"
    result = delete_session(session_id)
    print("Resultado da exclusão:", result)

Histórico de conversas

python

API_URL = "http://localhost:9090/api/v1/sessions/{session_id}/history"

def get_history(session_id):
    response = requests.get(API_URL.format(session_id=session_id))
    if response.status_code == 200:
        return response.json()
    else:
        return {"error": response.text}

if __name__ == "__main__":
    session_id = "id_da_sessao"
    history = get_history(session_id)
    print("Histórico da sessão:", history)